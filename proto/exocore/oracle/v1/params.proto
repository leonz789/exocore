syntax = "proto3";
package exocore.oracle.v1;

import "exocore/oracle/v1/info.proto";
import "exocore/oracle/v1/token_feeder.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "cosmos_proto/cosmos.proto";
import "amino/amino.proto";
option go_package = "github.com/ExocoreNetwork/exocore/x/oracle/types";

// Params defines the parameters for the module.
message Params {
  option (gogoproto.goproto_stringer) = false;
  // chains represents the blockchains info
  repeated Chain chains = 1;
  // tokens info
  repeated Token tokens = 2;
  // sources info from where the price data would be fetched
  repeated Source sources = 3;
  // rules specified on how to decide the provided price source to be accept
  repeated RuleSource rules = 4;
  // each tokenFeeder represents an active token whose price being updated
  repeated TokenFeeder token_feeders = 5;
  // for each round allow at most max_nonce transactions to be sent by one validator, [1,max_nonce]
  int32 max_nonce = 6;
  // voting power need to reach more than threshold_a/threshold_b
  int32 threshold_a = 7;
  // voting power need to reach more than threshold_a/threshold_b
  int32 threshold_b = 8;
  // for v1, mode=1, get final price as soon as voting power reach threshold_a/threshold_b
  ConsensusMode mode = 9;
  // for each round, a validator only allowed to provide at most max_det_id continuos rounds of prices for DS
  int32 max_det_id = 10;
  // for each token, only keep max_size_prices round of prices
  int32 max_size_prices = 11;

  // slashing defined the slashing related params
  SlashingParams slashing = 12;
}

// ConsensusMode defines the consensus mode for the prices.
enum ConsensusMode {
  option (gogoproto.goproto_enum_prefix) = false;
  // CONSENSUS_MODE_UNSPECIFIED defines an invalid mode.
  CONSENSUS_MODE_UNSPECIFIED = 0 [(gogoproto.enumvalue_customname) = "ConsensusModeUnspecified"];
  // CONSENSUS_MODE_ASAP defines the mode to get final price immediately when the voting power
  // exceeds the threshold.
  CONSENSUS_MODE_ASAP = 1 [(gogoproto.enumvalue_customname) = "ConsensusModeASAP"];
}

// slashing related params
message SlashingParams {
  int64 reported_rounds_window  = 1;
  bytes min_reported_per_window = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
  google.protobuf.Duration oracle_miss_jail_duration = 3 
      [(gogoproto.nullable) = false, (amino.dont_omitempty) = true, (gogoproto.stdduration) = true];
  google.protobuf.Duration oracle_malicious_jail_duration =4 
      [(gogoproto.nullable) = false, (amino.dont_omitempty) = true, (gogoproto.stdduration) = true];
  bytes slash_fraction_miss_report = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
  bytes slash_fraction_malicious_report = 6 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
  bytes slash_fraction_miss = 7 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
  bytes slash_fraction_malicious = 8 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];

}
